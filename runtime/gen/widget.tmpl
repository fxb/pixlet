type {{.Name}} struct {
{{if .SuperName}}
	{{.SuperName}}
{{end}}
	{{.FullName}}
{{range .Attr}}
{{if or .StarlarkField (eq .Type "starlark.Value") (eq .Type "*starlark.List")}}
	starlark{{.Render}} {{.Type}}
{{end}}
{{end}}
{{if .HasSize}}
	size *starlark.Builtin
{{end}}
}

func new{{.Name}}(
	thread *starlark.Thread,
	_ *starlark.Builtin,
	args starlark.Tuple,
	kwargs []starlark.Tuple,
) (starlark.Value, error) {

	var (
		{{range .Attr}}{{if not .ReadOnly}}{{.Starlark}} {{.Type}}{{end}}
		{{end}}
	)

	if err := starlark.UnpackArgs(
		"{{.Name}}",
		args, kwargs,
{{- range .Attr}}{{if not .ReadOnly}}
		"{{.Starlark}}{{if not .Required}}?{{end}}", &{{.Starlark}},
{{- end}}{{end}}
	); err != nil {
		return nil, fmt.Errorf("unpacking arguments for {{.Name}}: %s", err)
	}

	w := &{{.Name}}{}

{{range .Attr}}
{{.Code}}
{{end}}

{{if .HasSize}}
	w.size = starlark.NewBuiltin("size", {{.Name|ToLower}}Size)
{{end}}

{{if .RequiresInit}}
	if err := w.Init(); err != nil {
		return nil, err
	}
{{end}}

	return w, nil
}

{{if eq .SuperName "Widget" }}
func (w *{{.Name}}) AsRenderWidget() render.Widget {
	return &w.{{.Name}}
}
{{end}}

func (w *{{.Name}}) AttrNames() []string {
	return []string{
{{range .Attr -}}
		"{{.Starlark}}",
{{- end}}
	}
}

func (w *{{.Name}}) Attr(name string) (starlark.Value, error) {
	switch name {
{{range .Attr}}
	case "{{.Starlark}}":
{{if .StarlarkField}}
		return w.starlark{{.Render}}, nil
{{else if eq .Type "starlark.String"}}
		return starlark.String(w.{{.Render}}), nil
{{else if eq .Type "starlark.Int"}}
		return starlark.MakeInt(w.{{.Render}}), nil
{{else if eq .Type "starlark.Bool"}}
		return starlark.Bool(w.{{.Render}}), nil
{{else}}
		return w.starlark{{.Render}}, nil
{{end}}
{{end}}
{{if .HasSize}}
	case "size":
		return w.size.BindReceiver(w), nil
{{end}}
	default:
		return nil, nil
	}
}

func (w *{{.Name}}) String() string       { return "{{.Name}}(...)" }
func (w *{{.Name}}) Type() string         { return "{{.Name}}" }
func (w *{{.Name}}) Freeze()              {}
func (w *{{.Name}}) Truth() starlark.Bool { return true }

func (w *{{.Name}}) Hash() (uint32, error) {
	sum, err := hashstructure.Hash(w, hashstructure.FormatV2, nil)
	return uint32(sum), err
}

{{if .HasSize}}
func {{.Name|ToLower}}Size(
	thread *starlark.Thread,
	b *starlark.Builtin,
	args starlark.Tuple,
	kwargs []starlark.Tuple) (starlark.Value, error) {

	w := b.Receiver().(*{{.Name}})
	width, height := w.Size()

	return starlark.Tuple([]starlark.Value{
		starlark.MakeInt(width),
		starlark.MakeInt(height),
	}), nil
}

{{end}}
